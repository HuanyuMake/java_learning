<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    配置 filter , 这里配置了Spring的编码过滤器 , 让所有请求先经由编码过滤器来处理编码问题
        且这个 filter对应的filter-mapping必须要设置在所有filter-mapping的第一个位置上, 因为只有在获取请求参数前,设置了编码
        获取参数才不会乱码, 在获取参数后再设置编码,得到的请求参数还会使乱码-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param> <!--给所有请求使用该编码转码-->
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!--以下这个不用设置 Tomcat11的请求与响应的编码现在都是UTF-8, 谢了这个反而会在跳转时乱码-->
        <!--<init-param>  &lt;!&ndash;强制给所有请求及响应使用该编码&ndash;&gt;
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>-->
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
<!--
    配置 SpringMVC的前端控制器 DispatcherServlet

    url-pattern中 /  和 /* 的区别
    /  匹配浏览器向服务器发送的所有请求,不包括 .jsp 后缀的请求
    /* 匹配浏览器向服务器发送的所有请求,包括 .jsp 后缀的请求
    这里需要使用 / 来匹配, 因为 在 tomcat中, .jsp 后缀请求是由一个 jsp servlet来处理的
    (tomcat服务器下的conf下的web-config.xml中配置了)
    DispatcherServlet 是处理不了 这种 .jsp 后缀请求的

    SpringMVC 配置文件的默认路径以及文件名
    path: webapp/WEB-INF
    fileName: <servlet-name>-servlet.xml
    例如, 以现在该文件的相关配置, SpringMVC默认配置文件为 webapp/WEB-INF/SpringMVC-servlet.xml
-->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--配置SpringMVC的配置文件路径-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:applicationContext.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup> <!--将DispatcherServlet的启动时间提前到服务器启动时-->
        <multipart-config> <!--设置 StandardServletMultipartResolver 文件上传接卸器的默认存储路径-->
            <location>D://myCode</location>
        </multipart-config>
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
<!--        该servlet处理的url模型, 符合就交由 该servlet处理该请求-->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--<welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>-->
</web-app>